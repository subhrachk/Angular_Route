{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"newServercoment\"];\nexport class NewServer {\n  constructor() {\n    this.serverCreated = new EventEmitter();\n    this.serverName = '';\n    this.serverContent = '';\n  }\n  addNewServer(newServerName) {\n    this.serverCreated.emit({\n      server: {\n        newserverName: newServerName.value,\n        newServerComment: this.Servercoment.nativeElement.value,\n        newserverType: 'server'\n      }\n    });\n  }\n  addNewBluePrint(newServerName) {\n    this.serverCreated.emit({\n      server: {\n        newserverName: newServerName.value,\n        newServerComment: this.Servercoment.nativeElement.value,\n        newserverType: 'blueprint'\n      }\n    });\n  }\n}\nNewServer.ɵfac = function NewServer_Factory(t) {\n  return new (t || NewServer)();\n};\nNewServer.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewServer,\n  selectors: [[\"app-newserver\"]],\n  viewQuery: function NewServer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.Servercoment = _t.first);\n    }\n  },\n  outputs: {\n    serverCreated: \"serverCreated\"\n  },\n  decls: 16,\n  vars: 0,\n  consts: [[\"for\", \"serverName\"], [\"id\", \"serverName\", \"name\", \"serveName\", 1, \"form-control\", \"col-lg-2\"], [\"newServerName\", \"\"], [\"for\", \"serverContent\"], [\"id\", \"serverContent\", \"name\", \"serverContent\", 1, \"form-control\"], [\"newserverContent\", \"\"], [1, \"p-2\"], [1, \"btn\", \"btn-primary\", \"p-2\", 3, \"click\"]],\n  template: function NewServer_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"label\", 0);\n      i0.ɵɵtext(3, \"Server Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 1, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\")(7, \"label\", 3);\n      i0.ɵɵtext(8, \"Server Content\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4, 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 6)(12, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function NewServer_Template_button_click_12_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(5);\n        return i0.ɵɵresetView(ctx.addNewServer(_r0));\n      });\n      i0.ɵɵtext(13, \"Add Server\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function NewServer_Template_button_click_14_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(5);\n        return i0.ɵɵresetView(ctx.addNewBluePrint(_r0));\n      });\n      i0.ɵɵtext(15, \"Add Server BluePrint\");\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAgCA,YAAY,QAA2B,eAAe;;;AAQtF,OAAM,MAAOC,SAAS;EANtBC;IAUc,kBAAa,GAAG,IAAIF,YAAY,EAGK;IAC/C,eAAU,GAAY,EAAE;IACxB,kBAAa,GAAY,EAAE;;EAG3BG,YAAY,CAACC,aAAgC;IACzC,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC;MACxBC,MAAM,EAAG;QAAGC,aAAa,EAAGJ,aAAa,CAACK,KAAK;QACnCC,gBAAgB,EAAG,IAAI,CAACC,YAAY,CAACC,aAAa,CAACH,KAAK;QACxDI,aAAa,EAAG;MAAQ;KAAG,CAAC;EAC5C;EACAC,eAAe,CAACV,aAAgC;IAC5C,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC;MACxBC,MAAM,EAAG;QAACC,aAAa,EAAGJ,aAAa,CAACK,KAAK;QACjCC,gBAAgB,EAAG,IAAI,CAACC,YAAY,CAACC,aAAa,CAACH,KAAK;QACxDI,aAAa,EAAG;MAAW;KAAG,CAAC;EAC/C;;AAvBSZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;QAATA,SAAS;EAAAc;EAAAC;IAAA;;;;;;;;;;;;;;;;;MCRtBC,2BAAK;MAE2BA,2BAAW;MAAAA,iBAAQ;MAC3CA,8BAAuF;MAC3FA,iBAAM;MACNA,2BAAK;MAC0BA,8BAAc;MAAAA,iBAAQ;MACjDA,8BAAyF;MAE7FA,iBAAM;MACNA,+BAAiB;MACuBA;QAAAA;QAAA;QAAA,OAASA,oCAA2B;MAAA,EAAC;MAACA,2BAAU;MAAAA,iBAAS;MAC7FA,kCAA6E;MAAzCA;QAAAA;QAAA;QAAA,OAASA,uCAA8B;MAAA,EAAC;MAACA,qCAAoB;MAAAA,iBAAS","names":["EventEmitter","NewServer","constructor","addNewServer","newServerName","serverCreated","emit","server","newserverName","value","newServerComment","Servercoment","nativeElement","newserverType","addNewBluePrint","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Users\\subhr\\Desktop\\My Project\\Angular Course\\Max_Lesson\\src\\app\\Component\\NewServer\\app.newserver.ts","C:\\Users\\subhr\\Desktop\\My Project\\Angular Course\\Max_Lesson\\src\\app\\Component\\NewServer\\app.newserver.html"],"sourcesContent":["import { Component, ElementRef, EventEmitter, Output, ViewChild } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector : 'app-newserver',\r\n    templateUrl : './app.newserver.html',\r\n    styleUrls : ['./app.newserver.css']\r\n})\r\n\r\nexport class NewServer {\r\n    @ViewChild('newServercoment', { static: true })\r\n    Servercoment!: ElementRef;\r\n\r\n    @Output() serverCreated = new EventEmitter<{server : {\r\n        newserverName : string, \r\n        newServerComment : string, \r\n        newserverType : 'server' | 'blueprint'}}>();\r\n    serverName : string = '';\r\n    serverContent : string = '';\r\n\r\n\r\n    addNewServer(newServerName : HTMLInputElement) {\r\n        this.serverCreated.emit({\r\n        server : {  newserverName : newServerName.value,   //this.serverName, \r\n                    newServerComment : this.Servercoment.nativeElement.value,  //this.serverContent, \r\n                    newserverType : 'server' }});\r\n    }\r\n    addNewBluePrint(newServerName : HTMLInputElement) {\r\n        this.serverCreated.emit({\r\n        server : {newserverName : newServerName.value,   //this.serverName, \r\n                    newServerComment : this.Servercoment.nativeElement.value, //this.serverContent, \r\n                    newserverType : 'blueprint' }})\r\n    }\r\n\r\n}","<div>\r\n    <div>\r\n        <label for=\"serverName\">Server Name</label>\r\n        <input class=\"form-control col-lg-2\" id=\"serverName\" name=\"serveName\" #newServerName />\r\n    </div>\r\n    <div>\r\n        <label for=\"serverContent\">Server Content</label>\r\n        <input class=\"form-control\" id=\"serverContent\" name=\"serverContent\"  #newserverContent />\r\n        <!-- [(ngModel)]=\"serverContent\" /> -->\r\n    </div>\r\n    <div class=\"p-2\">\r\n        <button class=\"btn btn-primary p-2\" (click)=\"addNewServer(newServerName)\">Add Server</button>\r\n        <button class=\"btn btn-primary p-2\" (click)=\"addNewBluePrint(newServerName)\">Add Server BluePrint</button>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}